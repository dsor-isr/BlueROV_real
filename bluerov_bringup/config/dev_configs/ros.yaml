bluerov_interface:
  node_frequency: 50 # Hz
  topics:
    subscribers:
      thrusters: "thrusters/rpm_command"
      gimbal: "gimbal_angle"
      thrusters_safety: "thrusters_safety"
    publishers:
      imu: "measurement/orientation"
      altimeter: "measurement/position"
      depth: "measurement/position"
      gps: "sensors/gnss"
      # Topics for debugging the direct sensor output
      data:
        altimeter: "drivers/altimeter/data"
        depth: "drivers/depth/data"
        pressure: "drivers/pressure/data"
        imu: "drivers/ahrs/data"
        voltage: "drivers/battery/voltage"
        current: "drivers/battery/current"

    services:
      lights: "set_lights"

dvl_interface:
  node_frequency: 10 # Hz
  topics:
    subscribers: 
      dvl_enable: "drivers/dvl/enable"
    publishers:
      dvl_json_data: "drivers/dvl/json_data"
      dvl_data: "drivers/dvl/data"
      velocity: "measurement/velocity"

ahrs_interface:
  node_frequency: 10.0 #Hz
  topics:
    subscribers:
        conf: conf
        tare: tare
    publishers:
        meas_filter: measurement/orientation
        data: data
        raw: raw
        mag: imu_pp
        diagnostics: diagnostics

# Topics for the Medusa interface node
medusa_interface:
  node_frequency: 20 #Hz
  # ROS topics
  topics:
    subscribers:
      vehicle_safety: "from_vehicle_safety"
      vehicle_state: "nav/filter/state"
    publishers:
      flag: "Flag"
      references:
        surge: "ref/surge"
        sway: "ref/sway"
        heave: "ref/heave"
        yaw: "ref/yaw"
        yaw_rate: "ref/yaw_rate"
        altitude: "ref/altitude"
        depth: "ref/depth"
      vehicle_state_mqtt: "from_ros_to_mqtt"
  services:
    # standard waypoint service without/with reference heading
    waypoint_standard: "controls/send_wp_standard"
    waypoint_heading: "controls/send_wp_heading"

# Topics for the vehicle safety
vehicle_safety:
  node_frequency: 10 #Hz
  topics:
    subscribers:
      network_stabilizer: "from_network_stabilizer"
      vehicle_state: "from_ros_to_mqtt"
    publishers:
      medusa_interface: "from_vehicle_safety"
    services:
      activate_potential: "activate_potential_field"

# Topics for the network stabilizer
network_stabilizer:
  topics: 
    subscribers:
      mqtt_bridge: "from_mqtt_bridge"
      state: "nav/filter/state"
    publishers:
      network_stabilizer: "from_network_stabilizer"

# Topics for the MQTT bridge node
mqtt_bridge:
  # ROS topics
  ros_topics:
    subscribers:
      ros_to_mqtt: "from_ros_to_mqtt"
      voltage: "drivers/battery/voltage"
      boat: "/console/fix"
    publishers:
      mqtt_to_ros: "from_mqtt_bridge"
      gimbal: "gimbal_angle"
    services:
      lights: "set_lights"
  # MQTT topics
  mqtt_topics:
    # Subscribers for data that comes from MQTT -> ROS
    subscribers:
      switch_client: "switch_client"
      references:
        heading: "position/Heading/reference"
        x: "position/X/reference"
        y: "position/Y/reference"
        z: "position/Z/reference"
        altitude: "position/Altitude/reference"
        latitude: "position/Latitude/reference"
        longitude: "position/Longitude/reference"
        yaw_rate_right: "blue-roses/europe/relative/TurnRight/command"
        yaw_rate_left: "blue-roses/europe/relative/TurnLeft/command"
        surge_forward: "blue-roses/europe/relative/MoveForward/command"
        surge_backward: "blue-roses/europe/relative/MoveBackward/command"
        sway_right: "blue-roses/europe/relative/MoveRight/command"
        sway_left: "blue-roses/europe/relative/MoveLeft/command"
        heave_down: "blue-roses/europe/relative/MoveDown/command"
        heave_up: "blue-roses/europe/relative/MoveUp/command"
        gimbal: "blue-roses/europe/relative/gimbal/command"
        lights: "blue-roses/europe/relative/lights/command"
        working_mode: "command_mode"
    # Publishers for data that comes from ROS -> MQTT
    publishers:
      from_ros:
        boat_latitude: "boat/latitude"
        boat_longitude: "boat/longitude"
        voltage: "voltage"
        working_mode: "/actual/working_mode"
        heading: "blue-roses/europe/position/Heading"
        roll: "position/Roll"
        pitch: "position/Pitch"
        x: "position/X"
        y: "position/Y"
        z: "blue-roses/europe/position/Z" #"position/Z"
        altitude: "blue-roses/europe/position/Altitude"
        latitude: "blue-roses/europe/position/Latitude"
        longitude: "blue-roses/europe/position/Longitude"
        yaw_rate: "position/YawRate"
        surge: "position/Surge"
        sway: "position/Sway"
        heave: "position/Heave"
      sub_topic_command: "/command"
      sub_topic_state: "/actual"


# Open loop controller - backup solution if something goes wrong
open_loop_controller:
  node_frequency: 10.0 # Hz
  topics:
    subscribers:
      surge_ref: "ref/surge"
      sway_ref: "ref/sway"
      heave_ref: "ref/heave"
      yaw_rate_ref: "ref/yaw_rate"
    publishers:
      body_force_request: "thrust_body_request"

# -----------------------------------
# Medusa stack configurations
# ------------------------------------

## --------------------------- ## 
#  vehicle_stabilizer           #
## --------------------------- ##
vehicle_stabilizer:
  topics:
    publishers:
      surge: "ref/surge"
      sway: "ref/heave"
      heave: "ref/heave"

      roll_rate: "ref/roll_rate"
      pitch_rate: "ref/pitch_rate"
      yaw_rate: "ref/yaw_rate"

      roll: "ref/roll"
      pitch: "ref/pitch"
      yaw: "ref/yaw"

      depth: "ref/depth"
      altitude: "ref/altitude"
  
## --------------------------- ## 
#  medusa_addons                #
## --------------------------- ## 
console_path_parser:
  node_frequency: 5
  topics:
    subscribers: 
      Mission_String: /bluerov/addons/Mission_String
      state: /bluerov/nav/filter/state
      flag: /bluerov/Flag
    publishers:
      Path_Section: /bluerov/addons/path_section
      Formation: /bluerov/addons/formation
      biased_formation: /bluerov/addons/biased_formation
      WPRef: /bluerov/addons/WPRef
      DepthRef: /bluerov/ref/depth
      AltRef: /bluerov/ref/altitude
      FullMission: /bluerov/addons/full_mission
    services:
      reset_path: "/bluerov/ResetPath"
      arc2d_path: "/bluerov/SpawnArc2DPath"
      line_path: "/bluerov/SpawnLinePath"
      pf_start: "/bluerov/PFStart"
      pf_stop: "/bluerov/PFStop"
      set_speed: "/bluerov/SetConstVdVehicle"

console_server:
    topics:
      services:
        wp_standard: "/bluerov/controls/send_wp_standard"
        wp_loose: "/bluerov/controls/send_wp_loose"
        wp_heading: "/bluerov/controls/send_wp_heading"
      console:
        waypoint: "wp_standard"

## --------------------------- ## 
#  medusa_nav                   #
## --------------------------- ## 
auvstate2mstate:
    node_frequency: 10
    topics:
        subscribers: ["/bluerov/nav/filter/state", "/bluerov/drivers/inside_pressure/data", "/bluerov/sensors/gnss"]
        publishers:  ["/bluerov/State"]

filter:
  node_frequency: 10
  topics:
    subscribers: ["/bluerov/nav/reset", "/bluerov/measurement/position", "/bluerov/measurement/velocity", "/bluerov/measurement/orientation"]
    publishers: ["/bluerov/nav/filter/state", "/bluerov/nav/filter/debug"]     
  topics_dr:
    velocity: "/bluerov/measurement/velocity"
    orientation: "/bluerov/measurement/orientation"
    true_state: "/bluerov/nav/filter/state"
    flag: "/bluerov/Flag"
    dead_reckoning: "/bluerov/nav/filter/state_dr"
    dead_reckoning_console: "/bluerov/State_dr"
  services_dr:
    reset_filter_dr: "/bluerov/nav/reset_filter_dr"

# Convert sensor_msgs::NavSatFix to medusa_msgs::Measurement data type
gnss2utm:
  node_frequency: 10
  topics:
    subscribers: [ "/bluerov/sensors/gnss" ]
    publishers: [ "/bluerov/measurement/position" ]
    ground_truth: "/bluerov/State_gt"
  services:
    enable_gps: "/bluerov/sensor/enable_gps"

## --------------------------- ## 
#  medusa_control               #
## --------------------------- ##
static_thruster_allocation:
  topics:
    subscribers:
      thrust_body_request: "/bluerov/thrust_body_request"
    publishers:
      thrusters: "/bluerov/thrusters/rpm_command"

inner_loops_pid:
  node_frequency: 10.0 
  topics:
    subscribers:
      yaw: "/bluerov/ref/yaw"
      pitch: "/bluerov/ref/pitch"
      roll: "/bluerov/ref/roll"
      yaw_rate: "/bluerov/ref/yaw_rate"
      pich_rate: "/bluerov/ref/pitch_rate"
      roll_rate: "/bluerov/ref/roll_rate"
      surge: "/bluerov/ref/surge"
      sway: "/bluerov/ref/sway"
      heave: "/bluerov/ref/heave"
      depth: "/bluerov/ref/depth"
      altitude: "/bluerov/ref/altitude"
      altitude_safety: "/bluerov/ref/altitude_safety"
      depth_safety: "/bluerov/ref/depth_safety"
      state: "/bluerov/nav/filter/state"
      force_bypass: "/bluerov/force_bypass"
    publishers:
      thrust_body_request: "/bluerov/thrust_body_request"
      debug:
        surge: "/bluerov/pid_debug/surge"
        sway: "/bluerov/pid_debug/sway"
        heave: "/bluerov/pid_debug/heave"
        yaw: "/bluerov/pid_debug/yaw"
        yaw_rate: "/bluerov/pid_debug/yaw_rate"
        roll: "/bluerov/pid_debug/roll"
        pitch: "/bluerov/pid_debug/pitch"
        depth: "/bluerov/pid_debug/depth"
 
### Way Point
waypoint:
  node_frequency: 10.0
  topics:
    publishers:
      yaw_ref: "/bluerov/ref/yaw"
      yaw_rate_ref: "/bluerov/ref/yaw_rate"
      u_ref: "/bluerov/ref/surge"
      v_ref: "/bluerov/ref/sway"
      flag: "/bluerov/Flag"
    subscribers:
      flag: "/bluerov/Flag"
      state: "/bluerov/nav/filter/state"
    services:
      wp_standard: "/bluerov/controls/send_wp_standard"
      wp_loose: "/bluerov/controls/send_wp_loose"
      wp_heading: "/bluerov/controls/send_wp_heading"

### Path Following
path_following:
  node_frequency: 10.0
  flag: "/bluerov/Flag"
  topics:
    subscribers:
      state: "/bluerov/nav/filter/state"
      path: "/bluerov/PathData"
      vc: "/bluerov/PF/vc"
    publishers:
      # Publishers for linear motion
      surge: "/bluerov/ref/surge"
      sway: "/bluerov/ref/sway"
      heave: "/bluerov/ref/heave"

      # Publishers for angular motion
      roll: "/bluerov/ref/roll"
      roll_rate: "/bluerov/ref/roll_rate"
      pitch: "/bluerov/ref/pitch"
      pitch_rate: "/bluerov/ref/pitch_rate"
      yaw: "/bluerov/ref/yaw"
      yaw_rate: "/bluerov/ref/yaw_rate"

      # Publishers for the virtual target
      rabbit: "/bluerov/Gamma"
      
      # Observer for the currents
      observer:
        x: "/bluerov/current/x"
        y: "/bluerov/current/y"

      # Publish info for plots
      pfollowing_debug: "bluerov/pfollowing/debug"
    # Define here the service names to switch between controllers 
    services:
      # Service names to start and stop the path following algorithm
      start_pf: "/bluerov/PFStart"
      stop_pf: "/bluerov/PFStop"
      updates_gains_pf: "/bluerov/PFUpdateGains"
      reset_vt_pf: "/bluerov/ResetVT"

      # Service names to switch the path following algorithm
      marcelo_pf: "/bluerov/PFSetMarcelo"
      aguiar_pf: "/bluerov/PFSetAguiar"
      brevik_pf: "/bluerov/PFSetBrevik"
      fossen_pf: "/bluerov/PFSetFossen"
      romulo_pf: "/bluerov/PFSetRomulo"
      lapierre_pf: "/bluerov/PFSetLapierre"
      pramod_pf: "/bluerov/PFSetPramod"
      samson_pf: "/bluerov/PFSetSamson"
      relative_heading_pf: "/bluerov/PFSetRelativeHeading"
      # Service names related to the path
      reset_path: "/bluerov/ResetPath"
      set_path_mode: "/bluerov/SetMode"
      # Service names related to the waypoint
      wp_standard: "/bluerov/controls/send_wp_standard"

## --------------------------- ## 
#  medusa_planning              #
## --------------------------- ##
dsor_paths:
  node_frequency: 10.0
  frame_id: "Path_frame"
  topics:
    subscribers:
      gamma: "/bluerov/Gamma"
      vehicle_state: "/bluerov/nav/filter/state"
    publishers:
      path_data: "/bluerov/PathData"
      virtual_target_state: "/bluerov/Virtual/State"
    services:
      reset_path: "/bluerov/ResetPath"
      set_mode: "/bluerov/SetMode"
      arc2d_path: "/bluerov/SpawnArc2DPath"
      bernoulli_path: "/bluerov/SpawnBernoulliPath"
      circle2d_path: "/bluerov/SpawnCircle2DPath"
      line_path: "/bluerov/SpawnLinePath"
      speed:
        const_rabbit_speed: "/bluerov/SetConstVdRabbit"
        const_vehicle_speed: "/bluerov/SetConstVdVehicle"