<?xml version="1.0"?>
<launch>

    <env name="ROSCONSOLE_FORMAT" value="[${severity}] [${time}]: ${node}: ${message}"/>

    <!-- Parameters and Arguments -->
    <arg name="name" />                                        <!-- Name of the vehicle being launched -->   
    <arg name="config_package_path"  />                        <!-- Name of the package where the configuration files are stored -->
    <arg name="folder"                default="simulation" />  <!-- Name of the folder for the configuration files -->
    <arg name="vehicle_configuration" default="heavy" />       <!-- 6 or 8 thruster configuration (supports: 'regular' and 'heavy') --> 
    <arg name="namespace"             default="false" />

    <arg name="mqtt_bridge"         default="false" />  
    <arg name="network_stabilizer"  default="false" />
    <arg name="vehicle_safety"      default="false" />
    <arg name="medusa_interface"    default="false" />

    <!-- Vehicle Specific Config File -->
    <arg name="dollar" value="$" />
    <rosparam command="load" file="$(arg dollar)$(arg config_package_path))/config/$(arg folder)/$(arg vehicle_configuration)/mqtt.yaml" />

    <!-- MQTT bridge that receives/sends data from/to ROS1 topics -->
    <group if="$(arg mqtt_bridge)">
        <node pkg="br_mqtt_bridge" type="br_mqtt_bridge_node" name="mqtt_bridge" respawn="false" output="screen" />
    </group>

    <group if="$(arg network_stabilizer)">
        <node pkg="br_network_stabilizer" type="br_network_stabilizer_node" name="network_stabilizer" respawn="false" output="screen" />
    </group>

    <group if="$(arg vehicle_safety)">
        <node pkg="br_vehicle_safety" type="br_vehicle_safety_node" name="vehicle_safety" respawn="false" output="screen" />
    </group>

    <group if="$(arg medusa_interface)">
        <node pkg="br_medusa_interface" type="br_medusa_interface_node" name="medusa_interface" respawn="false" output="screen" />
    </group>
</launch>